generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum ValidRoles {
  user
  seller
  admin
  super_user
}

// * User database structure
model User {
  id       String @id @default(uuid()) @map("id")
  email    String @unique @map("email")
  password String @map("password")

  roles     ValidRoles[] @default([user]) @map("roles")
  isActive  Boolean      @default(true) @map("is_active")
  sessionId String?      @map("session_id")
  branchId  String?      @map("branch_id")

  createdAt  DateTime  @default(now()) @map("created_at")
  lastAccess DateTime? @map("last_access")

  // * Relations
  LogAccess      LogAccess[]
  ShoppingCart   ShoppingCart[]
  Order          Order[]
  Branch         Branch?        @relation(fields: [branchId], references: [branchId])
  OrdersAsSeller Order[]        @relation("OrderSeller")

  @@index([id, email])
  @@map("users")
}

// * Table to store every access on sign in by the user
model LogAccess {
  id   String   @id @default(uuid()) @map("id")
  date DateTime @default(now()) @map("date")
  ip   String?  @map("ip")

  // * Relations
  userId String @map("user_id")
  User   User   @relation(fields: [userId], references: [id])

  @@map("log_access")
}

// * Branches
model Branch {
  branchId String  @id @default(uuid()) @map("branch_id")
  name     String  @map("name")
  isActive Boolean @default(true) @map("is_active")

  // * Relations
  ProductStock     ProductStock[]
  ShoppingCartItem ShoppingCartItem[]
  OrderItem        OrderItem[]
  User             User[]
  Order            Order[]

  @@map("branches")
}

// * Products
model ProductCategory {
  categoryId String @id @default(uuid()) @map("category_id")
  name       String @unique @map("name")

  Products Product[]

  @@index([categoryId, name])
  @@map("product_categories")
}

model ProductBrand {
  brandId String @id @default(uuid()) @map("brand_id")
  name    String @map("name")

  createdAt DateTime @default(now()) @map("created_at")

  // * Relations
  Product Product[]

  @@map("product_brands")
}

model ProductStock {
  stockId   String @id @default(uuid()) @map("stock_id")
  productId String @map("product_id")
  quantity  Int    @map("quantity")
  branchId  String @map("branch_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // * Relations
  Product Product @relation(fields: [productId], references: [productId])
  Branch  Branch  @relation(fields: [branchId], references: [branchId])

  @@map("products_stock")
}

model Product {
  productId   String   @id @default(uuid()) @map("product_id")
  name        String   @map("name")
  slug        String   @unique @map("slug")
  price       Int      @map("price")
  stock       Int      @default(0) @map("stock")
  images      String[] @map("images")
  description String?  @map("description")
  keywords    String[] @map("keywords")

  isActive   Boolean @default(false) @map("is_active")
  brandId    String  @map("brand_id")
  categoryId String  @map("category_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // * Relations
  ProductCategory     ProductCategory       @relation(fields: [categoryId], references: [categoryId])
  ProductBrand        ProductBrand          @relation(fields: [brandId], references: [brandId])
  ShoppingCartItem    ShoppingCartItem[]
  OrderItem           OrderItem[]
  ProductPriceHistory ProductPriceHistory[]
  ProductStock        ProductStock[]

  @@index([productId, slug])
  @@map("products")
}

// * Model for data analytics and price change registration 
// * When the price changes must to store a new row
model ProductPriceHistory {
  id        String   @id @default(uuid()) @map("id")
  productId String   @map("product_id")
  price     Int      @map("price")
  date      DateTime @default(now()) @map("date")

  // * Relations
  Product Product @relation(fields: [productId], references: [productId])

  @@index([productId, date])
  @@map("product_prices_history")
}

// * Shopping carts
model ShoppingCart {
  cartId String @id @default(uuid()) @map("cart_id")
  userId String @map("user_id")

  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // * Relations
  User             User               @relation(fields: [userId], references: [id])
  ShoppingCartItem ShoppingCartItem[]
  Order            Order[]

  @@index([cartId, userId])
  @@map("shopping_carts")
}

model ShoppingCartItem {
  itemId    String @id @default(uuid()) @map("item_id")
  productId String @map("product_id")
  quantity  Int    @map("quantity")
  cartId    String @map("cart_id")
  branchId  String @map("branch_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // * Relations
  ShoppingCart ShoppingCart @relation(fields: [cartId], references: [cartId])
  Product      Product      @relation(fields: [productId], references: [productId]) // * Price extracted from product (to get prices updated)
  Branch       Branch       @relation(fields: [branchId], references: [branchId])

  @@index([cartId])
  @@map("shopping_cart_items")
}

// * Orders

enum OrderStatus {
  PENDING // * Order received but not processed or paid yet
  PROCESSING // * Order is being prepared
  SHIPPED // * Order sent but not received yet
  DELIVERED // * Order received by the customer
  COMPLETED // * Order finished and closed
}

model Order {
  orderId  String      @id @default(uuid()) @map("order_id")
  userId   String      @map("user_id")
  sellerId String?     @map("seller_id")
  branchId String?     @map("branch_id")
  cartId   String      @map("cart_id")
  total    Int         @map("total")
  status   OrderStatus @default(PENDING) @map("status")

  // * User delivery information from e-commerce
  address     String @map("address")
  email       String @map("email")
  phoneNumber String @map("phone_number")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // * Relations
  User         User         @relation(fields: [userId], references: [id])
  Seller       User?        @relation("OrderSeller", fields: [sellerId], references: [id])
  Branch       Branch?      @relation(fields: [branchId], references: [branchId])
  ShoppingCart ShoppingCart @relation(fields: [cartId], references: [cartId])
  OrderItem    OrderItem[]

  @@map("orders")
}

model OrderItem {
  orderItemId String @id @default(uuid()) @map("order_item_id")
  orderId     String @map("order_id")
  productId   String @map("product_id")
  branchId    String @map("branch_id")

  quantity Int @map("quantity")
  price    Int @map("price")
  subtotal Int @map("subtotal")

  // * Relations
  Product Product @relation(fields: [productId], references: [productId])
  Order   Order   @relation(fields: [orderId], references: [orderId])
  Branch  Branch  @relation(fields: [branchId], references: [branchId])

  @@map("order_items")
}
